Google Oauth 2.0 REST API 

1) 인가코드 발급
https://accounts.google.com/o/oauth2/v2/auth?
 client_id=client_id&
 redirect_uri=https%3A//oauth2.example.com/code&
 response_type=code&
 scope=https%3A//www.googleapis.com/auth/drive.metadata.readonly&
 (추천)access_type=offline&
 (추천)state=state_parameter_passthrough_value&
 (선택)login_hint=&
 (선택)include_granted_scopes=true&
 (선택)prompt=consent&

민감하지 않은 범위
.../auth/userinfo.email   기본 Google 계정의 이메일 주소 확인	
.../auth/userinfo.profile 개인정보(공개로 설정한 개인정보 포함) 보기	
openid                    Google에서 내 개인정보를 나와 연결
https://www.googleapis.com/auth/userinfo.email
https://www.googleapis.com/auth/userinfo.profile
openid

민감한 범위 : 민감한 범위는 비공개 사용자 데이터에 대한 액세스를 요청하는 범위입니다.
BigQuery API	.../auth/bigquery                 Google BigQuery에서 데이터를 보고 관리합니다.	
BigQuery API	.../auth/cloud-platform           내 Google Cloud Platform 데이터 확인, 수정, 구성, 삭제	
BigQuery API	.../auth/bigquery.readonly        Google BigQuery에서 데이터를 봅니다.	
BigQuery API	.../auth/cloud-platform.read-only	Google Cloud Platform 서비스 전반에서 데이터 조회	
BigQuery API	.../auth/devstorage.full_control	Google 클라우드 저장소에서 데이터 및 권한 관리	
BigQuery API	.../auth/devstorage.read_only     Google 클라우드 저장소에서 데이터 조회	
BigQuery API	.../auth/devstorage.read_write    Google 클라우드 저장소에서 데이터 관리

Response
https://oauth2.example.com/auth?error=access_denied
https://oauth2.example.com/auth?code=4/P7q7W91a-oMsCeLvIaQm6bTrgtp7

2) 사용자 정보 및 토큰 발급
POST /token HTTP/1.1
Host: oauth2.googleapis.com
Content-Type: application/x-www-form-urlencoded
  code=4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&
  client_id=your_client_id&
  client_secret=your_client_secret&
  redirect_uri=https%3A//oauth2.example.com/code&
  grant_type=authorization_code

Response  
{
  "id_token": ""
  "access_token": "1/fFAGRNJru1FTz70BzhT3Zg",
  "expires_in": 3920,
  "token_type": "Bearer",
  "scope": "https://www.googleapis.com/auth/drive.metadata.readonly",
  "refresh_token": "1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI"
}

GET https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token={access_token}
headers Autorization Bearer {id_token}

-> id_token, refresh_token, getUserData - Save in DB
-> getUserData + jwtSecret -> cookie(maxAge: google expires_in)



시나리오
1) access_token 유효 / refresh_token 유효 - Good
2) access_token 만료 / refresh_token 유효 - access_token -> getUserData -> Find refresh_token -> Get New access_token
POST /token HTTP/1.1
Host: oauth2.googleapis.com
Content-Type: application/x-www-form-urlencoded
  client_id=your_client_id&
  client_secret=your_client_secret&
  refresh_token=refresh_token&
  grant_type=refresh_token
3) access_token 만료 / refresh_token 만료 - Relogin



